
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="rental-header-section">
    <div class="container rental-header-inner header-inner-spaced">
        <div class="row">
            <div class="col">
                <h3 class="display-4 border-bottom py-2 mb-3">Create Rental</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5">
                <form id="rentalForm" autocomplete="off">
                    <div class="form-group">
                        <label for="customerName">Customer Name</label>
                        <div class="tt-container">
                            <input type="text" class="form-control" name="customer" id="customer" data-rule-validCustomer="true" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="customerName">Movie</label>
                        <div class="tt-container">
                            <input type="text" class="form-control" id="movie" name="movie" dat-rule-validMovie="true">
                        </div>
                    </div>
                    <ul class="list-group my-3 py-2" id="movies"></ul>
                    <button class="btn btn-primary"><i class="fa fa-plus-circle"></i> Add</button>
                </form>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            var vm = {
                movieIds: [],
                customerId: ""
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            },
            {
                name: 'customers',
                display: 'name',
                source: customers
                }).on('typeahead:select', function (e, customer) {
                    vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            },
                {
                    name: 'movie',
                    display: 'name',
                    source: movies
                }).on('typeahead:select', function (e, movie) {
                    $("#movies").append("<li class='list-group-item text-capitalize'>" + movie.name + "</li>");

                    $("#movie").typeahead("val", "");

                    vm.movieIds.push(movie.id);

                });

            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId != 0;
            }, "Please select a valid customer");

            $.validator.addMethod("validMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie");

            var validators = $("#rentalForm").validate({
                submitHandler: function () {
                    //e.preventDefault();

                    $.ajax({
                        url: '/api/newRentals',
                        method: 'post',
                        data: vm,
                        success: function (data) {
                            toastr.success("Rentals added successfully");

                            $("#customer").typeahead("val", "");
                            $("#movie").typeahead("val", "");
                            $("#movies").empty();

                            vm = { movieIds: [] };

                            validators.resetForm();

                        },
                        error: function (a, b, c) {
                            if (a.status == 400)
                                toastr.error("The movie is not available at the moment");
                        }
                    });

                    return false;
                }
            });


        });

    </script>
    
    
}